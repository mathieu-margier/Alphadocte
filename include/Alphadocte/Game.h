/*
 * Copyright (C) 2022  Mathieu Margier
 *
 *  This file is part of Alphadocte.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>. 
 * 
 * File: Game.h
 */

#ifndef GAME_H_
#define GAME_H_

#include <Alphadocte/Hint.h>
#include <memory>
#include <map>
#include <set>
#include <string>
#include <string_view>
#include <thread>
#include <vector>

#include <Alphadocte/Alphadocte.h>

namespace Alphadocte {

class IGameRules;

/*
 * Game which has a secret word that must be found using as fewer guesses as possible.
 * Its rules can be chosen, to adapt to variants of this game.
 */
class Game {
public:
    // Constructors
    /*
     * Create a new game based on the given rules.
     * To start a new game, this object can be reused (see #reset()).
     *
     * Args :
     * - rules : pointer to the rules of the game
     *
     * Throws:
     * - InvalidArgException : if rules is a nullptr
     */
    Game(std::shared_ptr<IGameRules> rules);

    // Default constructors
    virtual ~Game() = default;
    Game(const Game &other) = default;
    Game(Game &&other) = default;
    Game& operator=(const Game &other) = default;
    Game& operator=(Game &&other) = default;

    // Getters/Setters
    /*
     * Return true if the game has started.
     */
    bool hasStarted() const;

    /*
     * Return true if the game is over (either lost or won)
     */
    bool isOver() const;

    /*
     * Return true if the game is over and have been won
     */
    bool isWon() const;

    /*
     * Return the total number of guess tried.
     */
    unsigned int getNbGuess() const;

    /*
     * Return the word to be guessed.
     */
    std::string_view getWord() const;

    /*
     * Set the word to be guessed.
     * If different from the current word, the game is reset.
     *
     * If word is invalid, this raises a InvalidArgException.
     *
     * Args:
     * - word : the solution which has to be guessed
     */
    void setWord(std::string word);

    /*
     * Return the vector of tried guesses for this game until now.
     * The reference is valid as long as the game is not reset.
     */
    const std::vector<std::string>& getTriedGuesses()  const;

    /*
     * Return the vector of hint vectors, which are in the same order as the guesses.
     * Hints' order in the vector is the same as guess word's letters.
     */
    const std::vector<std::vector<HintType>>& getGuessesHints() const;

    /*
     * Return a shared pointer to the rules defined for this game.
     * Guaranteed to be not nullptr.
     */
    std::shared_ptr<const IGameRules> getRules() const;

    /*
     * Set the rules for the games.
     * If pointer is not null and different from the current rules and a game is running,
     * the game is immediately reset with the new rules.
     * If the secret word is no longer valid with the new rules,
     * it is erased.
     *
     * Args :
     * - rules : pointer to the rules of the game
     */
    void setRules(std::shared_ptr<IGameRules> rules);

    // Methods
    /*
     * Reset the game, cleaning the guesses and the secret word.
     * Keep the same rules.
     */
    void reset();

    /*
     * Start a new game, if not running (throw an Exception).
     * If no secret word has been chosen, an Exception is thrown.
     */
    void start();

    /*
     * Try a new guess, returning the hints generated by it.
     * Hints' order in the vector is the same as guess word's letters.
     *
     * Throw an Exception if game state is invalid (ie game over or not started).
     * Throw an IllegalArgException if word is not a valid guess.
     *
     * A successful try result in a Hint vector made of only HintType::CORRECT,
     * which can also be checked with the isWon() method.
     *
     * Args :
     * - word : the word used as guess
     */
    const std::vector<HintType>& tryGuess(std::string word);

    // Static methods

    /*
     * Compute the hints generated by the guess word given the solution.
     *
     * Args :
     * - word : the word used as guess
     * - solution : the word used as solution
     */
    static std::vector<HintType> computeHints(std::string_view word, std::string_view solution);

    /*
     * Return a string representing a pattern for a new guess,
     * based on the given set of hints (ie results from previous result).
     *
     * The string matches the size of the secret word, and each char is
     * either the correct letter at its position if found,
     * or '.' if not yet found.
     *
     * Args :
     * - wordSize : the number of letters in the secret word, ie the template size
     * - guesses : the vector of guesses tried so far
     * - hints : the vector of hint vectors known so far
     */
    static std::string computeTemplate(size_t wordSize,
            const std::vector<std::string>& guesses,
            const std::vector<std::vector<HintType>>& hints);

    // Fields
private:
    std::string m_word;
    std::shared_ptr<IGameRules> m_rules; //cannot be null
    std::vector<std::string> m_guesses;
    std::vector<std::vector<HintType>> m_hints;
    bool m_start, m_win;
};

} /* namespace Alphadocte */

#endif /* GAME_H_ */
